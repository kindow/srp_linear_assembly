		.global NCC_all_orin
NCC_all_orin  .cproc L,R,Disparity,Lookup_L,Lookup_R

	.reg R1,R2,R3,R4,R5,R6,R7,R8,R9,R10
	.reg L1,L2,L3,L4,L5,L6,L7,L8,L9,L10
	.reg LR1,LR2,LR3,LR4,LR5,LR6,LR7,LR8,LR9,LR10
	.reg dotp_LR,temp2,temp1,temp,temp22,temp11
	.reg iniv,num,search_range,i,j,k,k1,width,height,ii,jj,position,position_r,row,row_r,tt,row_l,width1
	.reg aver_L,aver_R,N, result_up,dev_L,dev_R,result_down,ncc,max,dst,m1,m2,m3,distance
	.reg bl0_1,bl0_3,bl0_5,bl1_1,bl1_3,bl1_5,bl2_1,bl2_3,bl2_5,init,init1
	.reg const1,const2,cnt_min,cnt_max
	.reg s1,s2,s3
	.no_mdep

		mvk 1242,width
		mvk 375,height
		mvk 40,N
		mvk 80,search_range
		mvk 80,const2		 ;80
		zero const1   		 ;0
		add search_range,3, m2       ;83
		mpy width,2,width1
		intspu N,N


		sub height,4,i
loop_i:
		sub width, 4,j

		mpy i,width,init
		add init,width1,init
		sub init,5,init
		ldb *Disparity[init], bl0_3
		add init,1,init1
		ldb *Disparity[init1], bl1_3
		zero bl2_3
		zero bl2_1
		mvk 1,bl2_5
		sub bl0_3,2,bl0_1			;initialize block0 and get five search_range values
		sub bl1_3,2,bl1_1			;initialize block1 and get five search_range values
		add bl0_3,2,bl0_5
		add bl1_3,2,bl1_5
		max2 bl0_1, const1, bl0_1
		max2 bl1_1, const1, bl1_1
		min2 bl0_5, const2, bl0_5
		min2 bl1_5, const2, bl1_5

loop_j:
		zero max
		mpy i,width,position
		add position,j,position
		sub i,2,ii
		sub j,4,jj
		mpy ii,width,row
		add row,jj,row
		ldndw *Lookup_L[position],dev_L:aver_L

		ldndw *L(row), L2:L1			;load values of the window centered at (i,j) in the left image
		add row,width,row_l
		ldndw *L(row_l), L4:L3
		add row_l,width,row_l
		ldndw *L(row_l), L6:L5
		add row_l,width,row_l
		ldndw *L(row_l), L8:L7
		add row_l,width,row_l
		ldndw *L(row_l), L10:L9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

		mv bl0_1,cnt_min
		sub cnt_min,1,cnt_min
		mv bl0_5,k1
loop_blk0:
		zero dotp_LR
		sub position,k1,position_r
		sub row,k1,row_r

		ldndw *R(row_r), R2:R1
		add row_r,width,row_r
		ldndw *R(row_r), R4:R3
		add row_r,width,row_r
		ldndw *R(row_r), R6:R5
		add row_r,width,row_r
		ldndw *R(row_r), R8:R7
		add row_r,width,row_r
		ldndw *R(row_r), R10:R9
		ldndw *Lookup_R[position_r],dev_R:aver_R

;dotp of corresponding windows of the left image and right image
		dotpu4 L1,R1,LR1
		dotpu4 L2,R2,LR2
		dotpu4 L3,R3,LR3
		dotpu4 L4,R4,LR4
		dotpu4 L5,R5,LR5
		dotpu4 L6,R6,LR6
		dotpu4 L7,R7,LR7
		dotpu4 L8,R8,LR8
		dotpu4 L9,R9,LR9
		dotpu4 L10,R10,LR10

		dadd LR2:LR1,LR4:LR3,temp2:temp1
		dadd temp2:temp1,LR6:LR5,temp2:temp1
		dadd temp2:temp1,LR8:LR7,temp2:temp1
		dadd temp2:temp1,LR10:LR9,temp2:temp1
		add temp1,temp2,dotp_LR

;NCC calculation of a 5*8 window
		intspu dotp_LR,dotp_LR
		mpysp aver_L,N,temp
		mpysp temp,aver_R, result_up
		mpysp dev_L,dev_R, result_down  	;Denominator calculation: 1/(sqrtL*sqrtR)
		subsp dotp_LR, result_up,result_up	;Numerator calculation: (dotpLR-N*averL*averR)
		mpysp result_up,result_down,ncc

		cmpgtsp ncc,max,dst
		[dst] mv ncc,max
		[dst] mv k1,distance

		sub k1,1,k1
		sub k1,cnt_min,tt
		[tt] b loop_blk0


		mv bl1_1, cnt_min
		sub cnt_min,1,cnt_min
		mv bl1_5,k1
loop_blk1:
		zero dotp_LR
		sub position,k1,position_r
		sub row,k1,row_r

		ldndw *R(row_r), R2:R1
		add row_r,width,row_r
		ldndw *R(row_r), R4:R3
		add row_r,width,row_r
		ldndw *R(row_r), R6:R5
		add row_r,width,row_r
		ldndw *R(row_r), R8:R7
		add row_r,width,row_r
		ldndw *R(row_r), R10:R9

		ldndw *Lookup_R[position_r],dev_R:aver_R

;dotp of corresponding windows of the left image and right image
		dotpu4 L1,R1,LR1
		dotpu4 L2,R2,LR2
		dotpu4 L3,R3,LR3
		dotpu4 L4,R4,LR4
		dotpu4 L5,R5,LR5
		dotpu4 L6,R6,LR6
		dotpu4 L7,R7,LR7
		dotpu4 L8,R8,LR8
		dotpu4 L9,R9,LR9
		dotpu4 L10,R10,LR10

		dadd LR2:LR1,LR4:LR3,temp2:temp1
		dadd temp2:temp1,LR6:LR5,temp2:temp1
		dadd temp2:temp1,LR8:LR7,temp2:temp1
		dadd temp2:temp1,LR10:LR9,temp2:temp1
		add temp1,temp2,dotp_LR

;NCC calculation of a 5*8 window
		intspu dotp_LR,dotp_LR
		mpysp aver_L,N,temp
		mpysp temp,aver_R, result_up
		mpysp dev_L,dev_R, result_down  	;Denominator calculation: 1/(sqrtL*sqrtR)
		subsp dotp_LR, result_up,result_up	;Numerator calculation: (dotpLR-N*averL*averR)
		mpysp result_up,result_down,ncc

		cmpgtsp ncc,max,dst
		[dst] mv ncc,max
		[dst] mv k1,distance

		sub k1,1,k1
		sub k1,cnt_min,tt
		[tt] b loop_blk1

		mv bl2_5,k1
		mv bl2_1,cnt_min
		sub cnt_min,1,cnt_min
loop_blk2:
		zero dotp_LR
		sub position,k1,position_r
		sub row,k1,row_r

		ldndw *R(row_r), R2:R1
		add row_r,width,row_r
		ldndw *R(row_r), R4:R3
		add row_r,width,row_r
		ldndw *R(row_r), R6:R5
		add row_r,width,row_r
		ldndw *R(row_r), R8:R7
		add row_r,width,row_r
		ldndw *R(row_r), R10:R9
		ldndw *Lookup_R[position_r],dev_R:aver_R

;dotp of corresponding windows of the left image and right image
		dotpu4 L1,R1,LR1
		dotpu4 L2,R2,LR2
		dotpu4 L3,R3,LR3
		dotpu4 L4,R4,LR4
		dotpu4 L5,R5,LR5
		dotpu4 L6,R6,LR6
		dotpu4 L7,R7,LR7
		dotpu4 L8,R8,LR8
		dotpu4 L9,R9,LR9
		dotpu4 L10,R10,LR10

		dadd LR2:LR1,LR4:LR3,temp2:temp1
		dadd temp2:temp1,LR6:LR5,temp2:temp1
		dadd temp2:temp1,LR8:LR7,temp2:temp1
		dadd temp2:temp1,LR10:LR9,temp2:temp1
		add temp1,temp2,dotp_LR

;NCC calculation of a 5*8 window
		intspu dotp_LR,dotp_LR
		mpysp aver_L,N,temp
		mpysp temp,aver_R, result_up
		mpysp dev_L,dev_R, result_down  	;Denominator calculation: 1/(sqrtL*sqrtR)
		subsp dotp_LR, result_up,result_up	;Numerator calculation: (dotpLR-N*averL*averR)
		mpysp result_up,result_down,ncc

		cmpgtsp ncc,max,dst
		[dst] mv ncc,max
		[dst] mv k1,distance

		sub k1,1,k1
		sub k1,cnt_min,tt
		[tt] b loop_blk2

		stb distance,*Disparity[position]
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		mv bl1_1, bl2_1
		mv bl1_5, bl2_5
		mv bl0_1, bl1_1
		mv bl0_5, bl1_5
		sub init,1,init
		ldb *Disparity[init], bl0_3		;load new block0 and get five search_range values
		sub bl0_3,2,bl0_1
		add bl0_3,2,bl0_5
		max2 bl0_1, const1, bl0_1
		min2 bl0_5, const2, bl0_5

		sub j,1,j
		sub j,m2,tt			;j>=84
		;sub j,s2,tt				;j>=1095
		[tt] b loop_j

		;sub i,1,i
		;sub i,8,tt
		;[tt] b loop_i

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Loop2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

		;sub height,4,i
;loop_i:
		mv m2,j
		mvk 79,cnt_max
loop_j1:
		zero max
		mpy i,width,position
		add position,j,position
		sub i,2,ii
		sub j,4,jj
		mpy ii,width,row
		add row,jj,row
		ldndw *Lookup_L[position],dev_L:aver_L

		ldndw *L(row), L2:L1			;load values of the window centered at (i,j) in the left image
		add row,width,row_l
		ldndw *L(row_l), L4:L3
		add row_l,width,row_l
		ldndw *L(row_l), L6:L5
		add row_l,width,row_l
		ldndw *L(row_l), L8:L7
		add row_l,width,row_l
		ldndw *L(row_l), L10:L9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

		mv bl0_5,k1
		mv bl0_1,cnt_min
		sub cnt_min,1,cnt_min
loop_blk01:
		zero dotp_LR
		sub position,k1,position_r
		sub row,k1,row_r

		ldndw *R(row_r), R2:R1
		add row_r,width,row_r
		ldndw *R(row_r), R4:R3
		add row_r,width,row_r
		ldndw *R(row_r), R6:R5
		add row_r,width,row_r
		ldndw *R(row_r), R8:R7
		add row_r,width,row_r
		ldndw *R(row_r), R10:R9

		ldndw *Lookup_R[position_r],dev_R:aver_R

;dotp of corresponding windows of the left image and right image
		dotpu4 L1,R1,LR1
		dotpu4 L2,R2,LR2
		dotpu4 L3,R3,LR3
		dotpu4 L4,R4,LR4
		dotpu4 L5,R5,LR5
		dotpu4 L6,R6,LR6
		dotpu4 L7,R7,LR7
		dotpu4 L8,R8,LR8
		dotpu4 L9,R9,LR9
		dotpu4 L10,R10,LR10

		dadd LR2:LR1,LR4:LR3,temp2:temp1
		dadd temp2:temp1,LR6:LR5,temp2:temp1
		dadd temp2:temp1,LR8:LR7,temp2:temp1
		dadd temp2:temp1,LR10:LR9,temp2:temp1
		add temp1,temp2,dotp_LR

;NCC calculation of a 5*8 window
		intspu dotp_LR,dotp_LR
		mpysp aver_L,N,temp
		mpysp temp,aver_R, result_up
		subsp dotp_LR, result_up,result_up	;Numerator calculation: (dotpLR-N*averL*averR)
		mpysp dev_L,dev_R, result_down  	;Denominator calculation: 1/(sqrtL*sqrtR)
		mpysp result_up,result_down,ncc

		cmpgtsp ncc,max,dst
		[dst] mv ncc,max
		[dst] mv k1,distance

		sub k1,1,k1
		sub k1,cnt_min,tt
		[tt] b loop_blk01


		mv bl1_5,k1
		mv bl1_1,cnt_min
		sub cnt_min,1,cnt_min
loop_blk11:
		zero dotp_LR
		sub position,k1,position_r
		sub row,k1,row_r

		ldndw *R(row_r), R2:R1
		add row_r,width,row_r
		ldndw *R(row_r), R4:R3
		add row_r,width,row_r
		ldndw *R(row_r), R6:R5
		add row_r,width,row_r
		ldndw *R(row_r), R8:R7
		add row_r,width,row_r
		ldndw *R(row_r), R10:R9

		ldndw *Lookup_R[position_r],dev_R:aver_R

;dotp of corresponding windows of the left image and right image
		dotpu4 L1,R1,LR1
		dotpu4 L2,R2,LR2
		dotpu4 L3,R3,LR3
		dotpu4 L4,R4,LR4
		dotpu4 L5,R5,LR5
		dotpu4 L6,R6,LR6
		dotpu4 L7,R7,LR7
		dotpu4 L8,R8,LR8
		dotpu4 L9,R9,LR9
		dotpu4 L10,R10,LR10

		dadd LR2:LR1,LR4:LR3,temp2:temp1
		dadd temp2:temp1,LR6:LR5,temp2:temp1
		dadd temp2:temp1,LR8:LR7,temp2:temp1
		dadd temp2:temp1,LR10:LR9,temp2:temp1
		add temp1,temp2,dotp_LR

;NCC calculation of a 5*8 window
		intspu dotp_LR,dotp_LR
		mpysp aver_L,N,temp
		mpysp temp,aver_R, result_up
		subsp dotp_LR, result_up,result_up	;Numerator calculation: (dotpLR-N*averL*averR)
		mpysp dev_L,dev_R, result_down  	;Denominator calculation: 1/(sqrtL*sqrtR)
		mpysp result_up,result_down,ncc

		cmpgtsp ncc,max,dst
		[dst] mv ncc,max
		[dst] mv k1,distance

		sub k1,1,k1
		sub k1,cnt_min,tt
		[tt] b loop_blk11


		mv bl2_5,k1
		mv bl2_1,cnt_min
		sub cnt_min,1,cnt_min
loop_blk21:
		zero dotp_LR
		sub position,k1,position_r
		sub row,k1,row_r

		ldndw *R(row_r), R2:R1
		add row_r,width,row_r
		ldndw *R(row_r), R4:R3
		add row_r,width,row_r
		ldndw *R(row_r), R6:R5
		add row_r,width,row_r
		ldndw *R(row_r), R8:R7
		add row_r,width,row_r
		ldndw *R(row_r), R10:R9

		ldndw *Lookup_R[position_r],dev_R:aver_R

;dotp of corresponding windows of the left image and right image
		dotpu4 L1,R1,LR1
		dotpu4 L2,R2,LR2
		dotpu4 L3,R3,LR3
		dotpu4 L4,R4,LR4
		dotpu4 L5,R5,LR5
		dotpu4 L6,R6,LR6
		dotpu4 L7,R7,LR7
		dotpu4 L8,R8,LR8
		dotpu4 L9,R9,LR9
		dotpu4 L10,R10,LR10

		dadd LR2:LR1,LR4:LR3,temp2:temp1
		dadd temp2:temp1,LR6:LR5,temp2:temp1
		dadd temp2:temp1,LR8:LR7,temp2:temp1
		dadd temp2:temp1,LR10:LR9,temp2:temp1
		add temp1,temp2,dotp_LR

;NCC calculation of a 5*8 window
		intspu dotp_LR,dotp_LR
		mpysp aver_L,N,temp
		mpysp temp,aver_R, result_up
		subsp dotp_LR, result_up,result_up	;Numerator calculation: (dotpLR-N*averL*averR)
		mpysp dev_L,dev_R, result_down  	;Denominator calculation: 1/(sqrtL*sqrtR)
		mpysp result_up,result_down,ncc

		cmpgtsp ncc,max,dst
		[dst] mv ncc,max
		[dst] mv k1,distance

		sub k1,1,k1
		sub k1,cnt_min,tt
		[tt] b loop_blk21
;;;;;;;;;;;;;;;;;;;;store disparity value;;;;;;;;;;;;;;;;

		stb distance,*Disparity[position]

		sub jj,1,s1
		min2 search_range,s1,cnt_max
		mv bl1_1, bl2_1
		mv bl1_5, bl2_5
		mv bl0_1, bl1_1
		mv bl0_5, bl1_5

		sub init,1,init
		ldb *Disparity[init], bl0_3
		sub bl0_3,2,bl0_1			;load new block0 and get five search_range values
		add bl0_3,2,bl0_5
		max2 bl0_1, const1, bl0_1
		min2 bl0_1, cnt_max,bl0_1
		min2 bl0_5, cnt_max, bl0_5

		sub j,1,j
		sub j,5,tt
		[tt] b loop_j1

		sub i,1,i
		sub i,1,tt
		[tt] b loop_i

		.return
        .endproc



