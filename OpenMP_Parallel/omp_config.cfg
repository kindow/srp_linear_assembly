/* 
 * Copyright (c) 2012, Texas Instruments Incorporated
 * http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * --/COPYRIGHT--*/



// allocate out of this shared region heap after IPC has been started.

var SharedRegion = xdc.useModule('ti.sdo.ipc.SharedRegion');

// Configure HeapOMP for the shared memory heap

// HeapOMP created in ti/omp/common.cfg.xs

var HeapOMP = xdc.useModule('ti.omp.utils.HeapOMP');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
HeapOMP.sharedRegionId = 2;
HeapOMP.localHeapSize  = 0x40000;
HeapOMP.sharedHeapSize = 0x1000000;
//HeapOMP.sharedHeapSize = 0x1000000;

// Specify the Shared Region
SharedRegion.setEntryMeta( HeapOMP.sharedRegionId,
                            {   base: 0x90000000,
                                len:  HeapOMP.sharedHeapSize,
                                ownerProcId: 0,
                                cacheEnable: true,
                                createHeap: true,
                                isValid: true,
                                name: "heapomp",
                            }

);

/* load the common configuration file */
xdc.loadCapsule('ti/omp/common.cfg.xs');

var OpenMP = xdc.useModule('ti.omp.utils.OpenMP');
OpenMP.setNumProcessors(8);   

var System   = xdc.useModule('xdc.runtime.System');
System.extendedFormats = "%$S%$F%f";

Program.sectMap["ddr"] = new Program.SectionSpec();
Program.sectMap["ddr"].loadSegment = "DDR3";

Program.sectMap[".threadprivate"] = new Program.SectionSpec();
Program.sectMap[".threadprivate"].loadSegment = "L2SRAM";

var program = xdc.useModule('xdc.cfg.Program');

Program.sectMap[".far"] = new Program.SectionSpec();
Program.sectMap[".far"].loadSegment = "DDR3";
Program.sectMap[".cinit"] = new Program.SectionSpec();
Program.sectMap[".cinit"].loadSegment = "DDR3";
Program.sectMap[".fardata:Left"] = new Program.SectionSpec();
Program.sectMap[".fardata:Left"].loadSegment = "DDR3";
Program.sectMap[".fardata:Right"] = new Program.SectionSpec();
Program.sectMap[".fardata:Right"].loadSegment = "DDR3";
Program.sectMap[".MSMC0"] = new Program.SectionSpec();
Program.sectMap[".MSMC0"].loadSegment = "DDR3";

// Enable Cache Write-back for HEAPOMP
var Cache        = xdc.useModule('ti.sysbios.family.c66.Cache');
Cache.setMarMeta(0x80000000, 0x20000000, Cache.PC | Cache.WTE);



var LoggingSetup = xdc.useModule('ti.uia.sysbios.LoggingSetup');
LoggingSetup.eventUploadMode = LoggingSetup.UploadMode_JTAGRUNMODE;
LoggingSetup.loadLoggerSize = 1024;
LoggingSetup.mainLoggerSize = 32768;
LoggingSetup.sysbiosLoggerSize = 32768;
LoggingSetup.sysbiosTaskLogging = false;

/* The application is using the UIA benchmark events. */ 
var UIABenchmark  = xdc.useModule('ti.uia.events.UIABenchmark');

var LogSync = xdc.useModule('ti.uia.runtime.LogSync');

var GlobalTimestampTimer = xdc.useModule('ti.uia.family.c66.TimestampC66XGlobal');
//LogSync.GlobalTimestampProxy = GlobalTimestampTimer;
LogSync.enableEventCorrelationForJTAG = true;


var Log = xdc.useModule('xdc.runtime.Log');
var Diags = xdc.useModule('xdc.runtime.Diags');
 
/* enable runtime control of "info" events for non-modules */
var Main = xdc.useModule('xdc.runtime.Main');

Main.common$.diags_INFO = Diags.RUNTIME_ON
Main.common$.diags_USER1 = Diags.RUNTIME_OFF
//Main.common$.diags_USER1 = Diags.RUNTIME_OFF
